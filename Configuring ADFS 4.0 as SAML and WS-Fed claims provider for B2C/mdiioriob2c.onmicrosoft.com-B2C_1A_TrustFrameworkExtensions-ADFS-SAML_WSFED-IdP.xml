<TrustFrameworkPolicy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" PolicySchemaVersion="0.3.0.0" TenantId="mdiioriob2c.onmicrosoft.com" PolicyId="B2C_1A_TrustFrameworkExtensions-ADFS-SAML_WSFED-IdP" PublicPolicyUri="http://mdiioriob2c.onmicrosoft.com/B2C_1A_TrustFrameworkExtensions-ADFS-SAML_WSFED-IdP" TenantObjectId="dc42c495-8e12-4e70-94c8-4c0c2bd414fc">
  <BasePolicy>
    <TenantId>mdiioriob2c.onmicrosoft.com</TenantId>
    <PolicyId>B2C_1A_TrustFrameworkBase-ADFS-SAML_WSFED-IdP</PolicyId>
  </BasePolicy>
  <BuildingBlocks></BuildingBlocks>
  <ClaimsProviders>
  
  <!-- The below claims provider was configured by following https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-custom-setup-adfs2016-idp -->
  <ClaimsProvider>
    <!-- Given that we are adding both SAML and Ws-Fed claims providers in the same policy, the <domain> must be unique -->
    <Domain>marcelodiiorio.com-SAML2</Domain>
    <DisplayName>mdiiorio ADFS</DisplayName>
    <TechnicalProfiles>
    	<TechnicalProfile Id="mdiiorio-SAML2">
	        <DisplayName>mdiiorio ADFS - SAML2</DisplayName>
        	<Description>Login with your mdiiorio account</Description>
        	<Protocol Name="SAML2"/>
        	<Metadata>
			<!-- Both RequestsSigned and WantsEncryptedAssertions must be configured in relation to how you have them on the ADFS side. -->
        		<Item Key="RequestsSigned">false</Item>
        		<Item Key="WantsEncryptedAssertions">false</Item>
			<!-- Replace sts.marcelodiiorio.com with your own ADFS farm -->
        		<Item Key="PartnerEntity">https://sts.marcelodiiorio.com/federationmetadata/2007-06/federationmetadata.xml</Item>
        	</Metadata>
        	<CryptographicKeys>
			<!-- The below two keys must reference your own cryptographic keys -->
        		<Key Id="SamlAssertionSigning" StorageReferenceId="B2C_1A_ADFSSamlCert"/>
        		<Key Id="SamlMessageSigning" StorageReferenceId="B2C_1A_ADFSSamlCert"/>
        	</CryptographicKeys>
		<!-- The output claims below must contain at least the claims that are expected to be issued in the resulting token. See <OutputClaims> in the relying party policy. -->
        	<OutputClaims>
        		<OutputClaim ClaimTypeReferenceId="socialIdpUserId" PartnerClaimType="userPrincipalName" />
        		<OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name"/>
        		<OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="family_name"/>
        		<OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="email"/>
        		<OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name"/>
        		<OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="contoso.com" />
        		<OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication"/>
       		</OutputClaims>
        	<OutputClaimsTransformations>
	        	<OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName"/>
        		<OutputClaimsTransformation ReferenceId="CreateUserPrincipalName"/>
        		<OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId"/>
        		<OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId"/>
        	</OutputClaimsTransformations>
		<!-- SM-Noop does nothing. This provider can be used for suppressing SSO behavior for a specific technical profile. -->
        	<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop"/>
    	</TechnicalProfile>
    </TechnicalProfiles>
  </ClaimsProvider>
  
  <!-- The below claims provider was configured by following https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-custom-setup-adfs2016-idp and adapted based on https://github.com/Azure-Samples/active-directory-b2c-advanced-policies/blob/master/Documentation/Features%20part%206.md#specifying-a-technical-profile-for-a-ws-fed-claims-provider -->
  <ClaimsProvider>
    <!-- Given that we are adding both SAML and Ws-Fed claims providers in the same policy, the <domain> must be unique -->
    <Domain>marcelodiiorio.com-WSFED</Domain>
    <DisplayName>mdiiorio ADFS - WS-Fed</DisplayName>
    <TechnicalProfiles>
		<TechnicalProfile Id="mdiiorio-WSFED">
			<DisplayName>mdiiorio ADFS - WS-Fed</DisplayName>
			<Description>Login with your mdiiorio account</Description>
			<Protocol Name="WsFed"/>
			<Metadata>
				<!-- Replace sts.marcelodiiorio.com with your own ADFS farm -->
				<Item Key="PartnerEntity">https://sts.marcelodiiorio.com/federationmetadata/2007-06/federationmetadata.xml</Item>
				<!-- For WS-Fed, we need to specify the issuer URI -->
				<Item Key="IssuerUri">https://login.microsoftonline.com/te/mdiioriob2c.onmicrosoft.com/B2C_1A_TrustFrameworkBase-ADFS-SAML_WSFED-IdP</Item>
			</Metadata>
			<!-- The output claims below must contain at least the claims that are expected to be issued in the resulting token. See <OutputClaims> in the relying party policy. -->
			<OutputClaims>
				<OutputClaim ClaimTypeReferenceId="socialIdpUserId" PartnerClaimType="userPrincipalName" />
				<OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name"/>
				<OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="family_name"/>
				<OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="email"/>
				<OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name"/>
				<OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="marcelodiiorio.com" />
				<OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication"/>
			</OutputClaims>
			<OutputClaimsTransformations>
				<OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName"/>
				<OutputClaimsTransformation ReferenceId="CreateUserPrincipalName"/>
				<OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId"/>
				<OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId"/>
			</OutputClaimsTransformations>
			<!-- SM-Noop does nothing. This provider can be used for suppressing SSO behavior for a specific technical profile. -->
			<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop"/>
		</TechnicalProfile>
    </TechnicalProfiles>
  </ClaimsProvider>
  
    <!-- This is for Facebook as IdP using custom policies. -->
    <ClaimsProvider>
      <DisplayName>Facebook</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="Facebook-OAUTH">
          <Metadata>
            <Item Key="client_id">242748312747780</Item>
            <Item Key="scope">email public_profile</Item>
            <Item Key="ClaimsEndpoint">https://graph.facebook.com/me?fields=id,first_name,last_name,name,email</Item>
          </Metadata>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
	
    <!-- This is for local accounts. See https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-get-started-custom -->
    <ClaimsProvider>
      <DisplayName>Local Account SignIn</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="login-NonInteractive">
          <Metadata>
            <Item Key="client_id">ed800af4-7ff9-4807-8033-f2aa12dd2023</Item>
            <Item Key="IdTokenAudience">6b06f49f-9ad7-4213-9a5f-3d7244068faa</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="client_id" DefaultValue="ed800af4-7ff9-4807-8033-f2aa12dd2023" />
            <InputClaim ClaimTypeReferenceId="resource_id" PartnerClaimType="resource" DefaultValue="6b06f49f-9ad7-4213-9a5f-3d7244068faa" />
          </InputClaims>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
	
    <!-- This is for Azure AD (single-tenant) as IdP using custom policies. See https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-setup-aad-custom. 
    For multi-tenant scenario, see https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-setup-commonaad-custom -->
    <ClaimsProvider>
      <Domain>mdiiorio</Domain>
      <DisplayName>Login using mdiiorio</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="mdiiorioProfile">
          <DisplayName>mdiiorio Employee</DisplayName>
          <Description>Login with your mdiiorio account</Description>
          <Protocol Name="OpenIdConnect" />
          <OutputTokenFormat>JWT</OutputTokenFormat>
          <Metadata>
            <Item Key="METADATA">https://login.windows.net/mdiiorio.onmicrosoft.com/.well-known/openid-configuration</Item>
            <Item Key="ProviderName">https://sts.windows.net/8317fb2b-3c78-4109-8bb4-388fe06e512f/</Item>
            <Item Key="client_id">13212ab1-fdef-454e-a799-ad72ddb8711f</Item>
            <Item Key="IdTokenAudience">13212ab1-fdef-454e-a799-ad72ddb8711f</Item>
            <Item Key="response_types">id_token</Item>
            <Item Key="UsePolicyInRedirectUri">false</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="client_secret" StorageReferenceId="B2C_1A_mdiioriob2cAppSecret" />
          </CryptographicKeys>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="socialIdpUserId" PartnerClaimType="oid" />
            <OutputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="tid" />
            <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
            <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="mdiiorioAuthentication" />
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="AzureADmdiiorio" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
  </ClaimsProviders>
  
  <UserJourneys>
	  <!-- This is the user journey invoked from the relying party policy (DefaultUserJourney element). -->
	  <UserJourney Id="SignUpOrSignInUsingmdiiorio-Consolidated">
		  <OrchestrationSteps>
			<OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
			  <ClaimsProviderSelections>
				<!-- These elements make reference to elements in the orchestration step no. 2, except for LocalAccountSigninEmailExchange, which is in this same orchestration step. -->
				<ClaimsProviderSelection TargetClaimsExchangeId="FacebookExchange" />
				<ClaimsProviderSelection TargetClaimsExchangeId="mdiiorioExchange" />
				<ClaimsProviderSelection TargetClaimsExchangeId="mdiiorioExchange2" />
				<ClaimsProviderSelection TargetClaimsExchangeId="mdiiorioExchange3" />
				<ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountSigninEmailExchange" />
			  </ClaimsProviderSelections>
			  <ClaimsExchanges>
				<!-- The TechnicalProfileReferenceId mentioned below, makes reference to the technical profile that can be found in the base policy. -->
				<ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email" />
			  </ClaimsExchanges>
			</OrchestrationStep>
			<!-- Check if the user has selected to sign in using one of the social providers -->
			<OrchestrationStep Order="2" Type="ClaimsExchange">
			  <Preconditions>
				<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
				  <Value>objectId</Value>
				  <Action>SkipThisOrchestrationStep</Action>
				</Precondition>
			  </Preconditions>
			  <ClaimsExchanges>
				<!-- The technical profiles below can be found in the base policy. -->
				<ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
				<ClaimsExchange Id="mdiiorioExchange" TechnicalProfileReferenceId="mdiiorioProfile" />
				<ClaimsExchange Id="mdiiorioExchange2" TechnicalProfileReferenceId="mdiiorio-SAML2" />
				<ClaimsExchange Id="mdiiorioExchange3" TechnicalProfileReferenceId="mdiiorio-WSFED" />
				<ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmail" />
			  </ClaimsExchanges>
			</OrchestrationStep>
			<!-- For social IDP authentication, attempt to find the user account in the directory. -->
			<OrchestrationStep Order="3" Type="ClaimsExchange">
			  <Preconditions>
				<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
				  <Value>authenticationSource</Value>
				  <Value>localAccountAuthentication</Value>
				  <Action>SkipThisOrchestrationStep</Action>
				</Precondition>
			  </Preconditions>
			  <ClaimsExchanges>
				<ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError" />
			  </ClaimsExchanges>
			</OrchestrationStep>
			<!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId). 
			  This can only happen when authentication happened using a social IDP. If local account was created or authentication done
			  using ESTS in step 2, then an user account must exist in the directory by this time. -->
			<OrchestrationStep Order="4" Type="ClaimsExchange">
			  <Preconditions>
				<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
				  <Value>objectId</Value>
				  <Action>SkipThisOrchestrationStep</Action>
				</Precondition>
			  </Preconditions>
			  <ClaimsExchanges>
				<ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social" />
			  </ClaimsExchanges>
			</OrchestrationStep>
			<!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent 
			  in the token. -->
			<OrchestrationStep Order="5" Type="ClaimsExchange">
			  <Preconditions>
				<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
				  <Value>authenticationSource</Value>
				  <Value>socialIdpAuthentication</Value>
				  <Action>SkipThisOrchestrationStep</Action>
				</Precondition>
			  </Preconditions>
			  <ClaimsExchanges>
				<ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
			  </ClaimsExchanges>
			</OrchestrationStep>
			<!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect 
				 from the user. So, in that case, create the user in the directory if one does not already exist 
				 (verified using objectId which would be set from the last step if account was created in the directory. -->
			<OrchestrationStep Order="6" Type="ClaimsExchange">
			  <Preconditions>
				<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
				  <Value>objectId</Value>
				  <Action>SkipThisOrchestrationStep</Action>
				</Precondition>
			  </Preconditions>
			  <ClaimsExchanges>
				<ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
			  </ClaimsExchanges>
			</OrchestrationStep>
			<!-- A JWT token is issued during the last orchestration step. This is normally expected, and we use to change this in cases like 
			B2C as SAML or WS-Fed issuer, for example, where we expect to issue SAML2 or 1.1 tokens. -->
			<OrchestrationStep Order="7" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
		  </OrchestrationSteps>
		  <ClientDefinition ReferenceId="DefaultWeb" />
	  </UserJourney>
  </UserJourneys>  
</TrustFrameworkPolicy>
